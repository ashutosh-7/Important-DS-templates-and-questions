class Solution {
public:
    int n,m;
    
    int solve(vector<vector<int>>&dp,vector<vector<int>>&grid,int row,int col)
    {
        if(row>=n or col>=m)
            return INT_MAX;
        if(row==n-1 and col==m-1)
            return grid[n-1][m-1];
        if(dp[row][col]!=-1)
            return dp[row][col];
        int op1=INT_MAX;
        int op2=INT_MAX;
        if(row+1<n)
        op1=grid[row][col]+solve(dp,grid,row+1,col);
        if(col+1<m)
        op2=grid[row][col]+solve(dp,grid,row,col+1);
        return  dp[row][col]=min(op1,op2);
    }
    int minPathSum(vector<vector<int>>& grid) {
         n=grid.size();
        if(n==0)
            return 0;
         m=grid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return solve(dp,grid,0,0);
    }
};