/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int>mp;
    int pre=0;
    TreeNode* solve(vector<int>&preorder,int start,int end)
    {
        if(start>end)
            return NULL;
        TreeNode* root=new TreeNode(preorder[pre++]);
        
        if(root==NULL)
            return NULL;
        if(start==end) //left and right nhi hai 
            return root;
        int id=mp[root->val];  //inorder mai wski position
        root->left=solve(preorder,start,id-1);
        root->right=solve(preorder,id+1,end);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0;i<inorder.size();i++)
            mp[inorder[i]]=i;
        return solve(preorder,0,preorder.size()-1);
    }
};