class Solution {
public:
    int color[200];
    bool solve(vector<vector<int>>& graph,int i)
    {
        int n=graph.size();
        queue<int>q;
        q.push(i);
        color[i]=1;
        while(!q.empty())
        {
            int cn=q.front();
            q.pop();
            for(auto it:graph[cn])
            {
                if(color[it]==color[cn])
                    return false;
                if(color[it]==-1){
                    q.push(it);
                    color[it]=1^color[cn];}
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        
        int n=graph.size();
        if(n==0)
            return true;
        for(int i=0;i<n;i++)
            color[i]=-1;
        for(int i=0;i<n;i++)
        {
            if(color[i]==-1){
            bool ans=solve(graph,i);
            if(ans==false)
                return ans;}
        }
        return true;
    }
};