stack<int>st;

void dfs(int node,vector<int>adj[],vector<int>&visit)
{
    visit[node]=1;
    for(auto it:adj[node])
    {
        if(visit[it]==0)
        dfs(it,adj,visit);
    }
    st.push(node);
}
void dfs2(int node,vector<int>adj[],vector<int>&visit)
{
    visit[node]=1;
    for(auto it:adj[node])
    {
        if(visit[it]==0)
        dfs(it,adj,visit);
    }
}
int kosaraju(int V, vector<int> adj[])
{
    while(!st.empty())
    st.pop();
   vector<int>visit(V,0);
   for(int i=0;i<V;i++)
   {
       if(visit[i]==0)
       dfs(i,adj,visit);
   }
   vector<int>arr[V]; //reversing edges of graph
   for(int i=0;i<V;i++)
   {
       for(auto it:adj[i])
       {
           arr[it].push_back(i);
       }
   }

    for(int i=0;i<V;i++)
    visit[i]=0;
    int ans=0;
  while(!st.empty())
  {
      int x=st.top();
      st.pop();
      if(visit[x]==0)
      {
          ans+=1;
          dfs2(x,arr,visit);
      }
  }
   return ans;
}